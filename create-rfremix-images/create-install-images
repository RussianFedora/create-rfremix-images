#!/bin/bash

# This script allow you to create instalation images of
# Fedora and RFRemix via internet connection.

# Author: Arkady L. Shane <ashejn [AT] gmail [DOT] com>

usage()
{
  echo
  echo "Create Fedora or RFRemix images from Internet"
  echo
  echo "Usage: create-install-images --family <dist name> --variant <variant name> --ver <version> --arch <arch> [options]"
  echo
  echo "    family name:   Fedora | RFRemix"
  echo "    variant name:  Server | Workstation | SW"
  echo "    version:       supported versions separated by '.' and '-'. Ex. 14-Beta, 12.2"
  echo "    arch:          i386 | x86_64 | all"
  echo "    options:"
  echo "    --vcs-configs  pull kickstarts from GIT"
  echo "    --rebuild      only run pungi in created mock environment"
  echo "    --config <ks>  use custom kickstart file"
  echo
  exit 1;
}

ok()
{
  echo -e "\t\t\\033[0;32m[  OK  ]\\033[0;39m"
}

fail()
{
  echo -e "\t\t\\033[0;31m[ FAIL ]\\033[0;39m"
  exit 1;
}

LANG=C

while [ $# -gt 0 ]; do
  case $1 in
    --family)
      FAMILY=$2
      shift; shift
    ;;
    --variant)
      VARIANT=$2
      shift; shift
    ;;

    --ver)
      VERSION=$2
      shift; shift
    ;;
    --arch)
      ARCH=$2
      shift; shift
    ;;
    --rebuild)
      REBUILD="yes"
      shift
    ;;
    --vcs-configs)
      VCS="yes"
      shift
    ;;
    --config)
      CONFIG=$2
      shift; shift
    ;;
    *)
      echo "Unknown parameter. Abort..."
      usage
    ;;
  esac
done

# check dist
if [ "$FAMILY" != "Fedora" -a "$FAMILY" != "RFRemix" ]; then
  echo "Unknown distribution. Abort..."
  usage
fi

if [ "$VARIANT" != "SW" -a "$VARIANT" != "Server" -a "$VARIANT" != "Workstation" ]; then
  echo "Unknown variant. Abort..."
  usage
elif [ "$VARIANT" == "SW" ]; then
  VARIANT="Server Workstation"
fi

# Set up paremeters
BUILDPARAM=""
KSPATH="/usr/share/spin-kickstarts"
LOGFILE="/var/tmp/${FAMILY,,}-build.log"

SUPPORT_VERSIONS="18 19 20 23 24 25 26 27 28"

# detect config_opts['basedir']
grep "^config_opts\['basedir'\]" /etc/mock/site-defaults.cfg > /dev/null

if [ $? -eq 0 ]; then
  MOCK_HOME="$(grep "^config_opts\['basedir'\]" /etc/mock/site-defaults.cfg | awk '{ print $NF }' | sed "s@'@@g")"
else
  MOCK_HOME="/var/lib/mock"
fi

# check version
MOCKVER=$(echo $VERSION | awk -F"." '{ print $1 }' | awk -F"-" '{ print $1 }' | awk -F"_" '{ print $1 }')

for ver in $SUPPORT_VERSIONS; do
  if [ "$MOCKVER" != "$ver" ]; then
    UNKNOWN="1"
  else
    UNKNOWN="0"
    break
  fi
done

if [ "$UNKNOWN" == "1" ]; then
  echo "Unknown version. Abort..."
  usage
fi

# check arch
if [ "$ARCH" == "all" ]; then
  ARCH="x86_64 i386"
elif [ "$ARCH" == "i386" -o "$ARCH" == "x86_64" ]; then
  true
else
  echo "Unknown Arch $ARCH. Abort..."
  usage
fi

# can we build x86_64 on an i386?
echo $ARCH | grep x86_64 >> $LOGFILE 2>&1

if [ "$?" -eq 0 -a "$(uname -m)" != "x86_64" ]; then
  echo "You cannot build x86_64 images on an i386 arch. Abort..."
  exit 10
fi 

# check mock config
for arch in $ARCH; do
  if [ ! -f /etc/mock/${FAMILY,,}-$MOCKVER-$arch.cfg ]; then
    echo "Mock config /etc/mock/${FAMILY,,}-$MOCKVER-$arch.cfg not found. Abort"
    exit 1
  fi
done

BUILDPARAM="$BUILDPARAM $ISOVER"

# new final release feature
if [ $MOCKVER -eq 26 -o $MOCKVER -eq 25 -o $MOCKVER -eq 24 ]; then
  BUILDPARAM="$BUILDPARAM --isfinal"
fi

echo
echo "Logging to $LOGFILE"

if [ "$REBUILD" != "yes" ]; then
  rm -f $LOGFILE
  for i in $ARCH; do
    echo -n "Cleaning chroot      -  $i"
    mock -r ${FAMILY,,}-$MOCKVER-$i --clean >> $LOGFILE 2>&1 && ok || fail

    echo -n "Initializing chroot  -  $i"
    mock -r ${FAMILY,,}-$MOCKVER-$i --init >> $LOGFILE 2>&1 && ok || fail

    echo -n "Installing pungi     -  $i"
    if [ "$VCS" == "yes" ]; then
      mock --dnf -r ${FAMILY,,}-$MOCKVER-$i --install MAKEDEV pungi-legacy lorax repoview libselinux-python yum python2-kobo python2-productmd python-lockfile createrepo python2-kickstart git >> $LOGFILE 2>&1 && ok || fail

      # pull kickstarts
      if [ "$FAMILY" == "Fedora" ]; then
        mock -r ${FAMILY,,}-$MOCKVER-$i --chroot "git clone --depth=1 -b f$MOCKVER git://git.fedorahosted.org/spin-kickstarts.git /usr/share/spin-kickstarts/" >> $LOGFILE 2>&1
      elif [ "$FAMILY" == "RFRemix" ]; then
        mock -r ${FAMILY,,}-$MOCKVER-$i --chroot "git clone --depth=1 -b f$MOCKVER/master --recursive git://github.com/RussianFedora/rfremix-kickstarts.git /usr/share/spin-kickstarts/" 
#>> $LOGFILE 2>&1
      fi
    else
      mock -r ${FAMILY,,}-$MOCKVER-$i --install MAKEDEV pungi ${FAMILY,,}-kickstarts >> $LOGFILE 2>&1 && ok || fail
    fi

    # Some releases ago we should do it.
    echo -n "Removing database    -  $i"
    mock -r ${FAMILY,,}-$MOCKVER-$i --chroot "rm -f /var/lib/rpm/__db.00*" >> $LOGFILE 2>&1 && ok || fail
  done
else
  for i in $ARCH; do
  # update kickstarts
      if [ "$FAMILY" == "Fedora" ]; then
        echo "Updating kickstarts for $i"
        mock -r ${FAMILY,,}-$MOCKVER-$i --chroot "cd /usr/share/spin-kickstarts/ &&  git pull origin f$MOCKVER" >> $LOGFILE 2>&1
      elif [ "$FAMILY" == "RFRemix" ]; then
        echo "Updating kickstarts for $i"
        mock -r ${FAMILY,,}-$MOCKVER-$i --chroot "cd /usr/share/spin-kickstarts/ &&  git pull origin f$MOCKVER/master" >> $LOGFILE 2>&1
      fi
  done
fi

echo

for i in $ARCH; do
  echo "See log in $MOCK_HOME/${FAMILY,,}-$MOCKVER-$i/root/builddir/${FAMILY,,}-$VERSION-$i-build.log"

  for variant in $VARIANT; do

    # clean temp directories (f15 pungi trouble)
    mock -r ${FAMILY,,}-$MOCKVER-$i --chroot "cd builddir; rm -rf work/$variant $VERSION/$variant;" >> $LOGFILE 2>&1

    if [ "$variant" == "Workstation" ]; then
      BUILDPARAM="$BUILDPARAM --no-dvd"
    fi

    echo -n "Building $FAMILY-$variant-$VERSION-$i-DVD"
    mock -r ${FAMILY,,}-$MOCKVER-$i --chroot "MAKEDEV lo; rm -f /var/cache/pungi/yumlock.lock; cd builddir && pungi -c $KSPATH/${FAMILY,,}-install-${variant,,}.ks --family=$FAMILY --variant=$variant --ver=$VERSION --nodebuginfo --nosource --force --installpkgs fedora-productimg-${variant,,} $BUILDPARAM > ${FAMILY,,}-$VERSION-$i-build.log 2>&1" >> $LOGFILE 2>&1 && ok || fail
    BUILDPARAM="${BUILPARAM/ --no-dvd/}"
  done

  echo "New distribution created in $MOCK_HOME/${FAMILY,,}-$MOCKVER-$i/root/builddir/$VERSION/"
done
